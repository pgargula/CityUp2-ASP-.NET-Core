@model PracaInzWebApplication.Models.ViewModels.AddApplication


<div class="container box">
    <h3>Dodaj nowe zgłoszenie: </h3>
    <form method="post">
        <div asp-validation-summary="All" class="text-danger"></div>
        <div class="row">
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-6">
                        <label>Tytuł:</label>
                        <input asp-for="@Model.Title" class="form-control" />
                        <span asp-validation-for="@Model.Title" class="text-danger" />
                    </div>
                    <div class="col-md-6">
                        <label>Kategoria:</label>
                        <select asp-for="@Model.CategoryId" class="form-control" id="categorySelect">
                            <option value="" selected disabled hidden id="loadingCategories">Ładowanie...</option>
                        </select>
                        <span asp-validation-for="@Model.CategoryId" class="text-danger" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <label>Opis:</label>
                        <textarea asp-for="@Model.Description" class="form-control" placeholder="Dodaj opis" style="min-height:250px;"></textarea>
                        <span asp-validation-for="@Model.Description" class="text-danger" />
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="row mt-3 justify-content-between">
                        <button class="btn btn-secondary">Dodaj zdjęcie</button>
                        <button type="submit" class="btn btn-primary">Dodaj zgłoszenie</button>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-5">
                        <label>Wybierz miasto:</label>
                        <select asp-for="@Model.CityId" class="form-control" id="citySelect">
                            <option value="" selected disabled hidden id="loadingCities">Ładowanie...</option>
                        </select>
                    </div>
                    <div class="col-md-7">
                        <label>Ulica:</label>
                        <input asp-for="@Model.Street" class="form-control" id="streetInput" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <label>Mapa: </label>
                        <div class="addAppMap" id="googleMap"></div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>
@section scripts{

    <script>
        ///////TODO: Send geolaction in viewmodel to controller!!!!!!!!

        //populating city select
    $.ajax({
        type: 'GET',
        url: '/api/ApiCity/',
        contentType: "application/json",
        dataType: 'json',
        success: function (cities) {
            $.each(cities, function (key, modelName) {
                var option = new Option(modelName, modelName);
                $(option).html(modelName);
                $("#citySelect").append('<option value="' + modelName.cityId + '">' + modelName.name + '</option>');
            });
           $('#citySelect').val(@User.Claims.FirstOrDefault(x => x.Type == "CityId").Value).change();      //set user default city
    }
});

        //populating category select
    $.ajax({
        type: 'GET',
        url: '/api/ApiCategory/',
        contentType: "application/json",
        dataType: 'json',
        success: function (categories) {
            $.each(categories, function (key, modelName) {
                var option = new Option(modelName, modelName);
                $(option).html(modelName);
                $("#categorySelect").append('<option value="' + modelName.categoryId + '">' + modelName.name + '</option>');
            });
           $('#categorySelect').val(1).change();
    }
});

        var citySelect = document.getElementById('citySelect');
        var selectedCity = citySelect.options[citySelect.selectedIndex].text;
        var input = document.getElementById('streetInput');

        $('#citySelect').change(function () {     //// city select change value
            selectedCity = $("#citySelect :selected").text();
        });

        ///TODO
        //$('#streetInput').keypress(function () {     //// street input change value
        //    input.value += selectedCity;
        //});

    var map;
    var marker;
    var geocoder 

        function initMap() {
            //sttarting location
            cityLocation = new google.maps.LatLng(50.001, 19.445);
            map = new google.maps.Map(
                document.getElementById('googleMap'), { zoom: 12, center: cityLocation });

            //map click setting lng ltd
            map.addListener('click', function (e) {
                placeMarker(e.latLng, map);
            });

            geocoder = new google.maps.Geocoder;

            ////Setting for autocomplete places
            
            var autocomplete = new google.maps.places.Autocomplete(input);

            // Bind the map's bounds (viewport) property to the autocomplete object,
            // so that the autocomplete requests use the current map bounds for the
            // bounds option in the request.
            autocomplete.bindTo('bounds', map);

            // Set the data fields to return when the user selects a place.
            autocomplete.setFields(
                ['address_components', 'geometry', 'icon', 'name']);

            marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            autocomplete.setTypes(['address']); //only adress allowed

            autocomplete.addListener('place_changed', function () {

                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert("Brak danych dla: '" + place.name + "'");
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);
                }
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = place.address_components[0] && place.address_components[0].short_name;
                    input.value = address;
                    //    [
                    //    (place.address_components[0] && place.address_components[0].short_name || ''),
                    //    (place.address_components[1] && place.address_components[1].short_name || ''),
                    //    (place.address_components[2] && place.address_components[2].short_name || '')
                    //].join(' ');
                }
            });

        }

        function getGeocode(geocoder, map, marker) {
        
            geocoder.geocode({ 'location': marker.position }, function (results, status) {
                if (status === 'OK') {
                    if (results[0]) {
                        input.value = results[0].address_components[1].long_name;
                    } else {
                        window.alert('No results found');
                    }
                } else {
                    window.alert('Geocoder failed due to: ' + status);
                }
            });
        }



//check if marker exist then clean map and set new
    function placeMarker(position, map) {
        if (marker) {
            marker.setMap(null);
        }
            marker = new google.maps.Marker({
            position: position,
            map: map
            });
        getGeocode(geocoder,map, marker);
        map.panTo(position);
}
    </script>

    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD7Qw325kHLvatZTnfpP9M6lGsU5l8qLFI&libraries=places&callback=initMap">
    </script>
}
